document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
    const GAMES_TO_UNLOCK = 15;
    let ALL_THEMES = {};

    // --- DOM –ï–õ–ï–ú–ï–ù–¢–ò ---
    const themeRadios = document.querySelectorAll('input[name="theme"]');
    const countRadios = document.querySelectorAll('input[name="count"]');
    const startGameBtn = document.getElementById('startGameBtn');
    const optionsContainer = document.getElementById('optionsContainer');
    const gameTitleEl = document.getElementById('gameTitle');
    const messageDisplay = document.getElementById('gameMessage');
    const startBtn = document.getElementById('start');
    const backToMenuBtn = document.getElementById('backToMenu');
    const allPicsEl = document.getElementById('allPics');
    const gamePicsEl = document.getElementById('gamePics');
    const containerEl = document.getElementById('container');
    const birdsThemeRadio = document.getElementById('birdsThemeRadio');
    const birdsThemeLabel = document.getElementById('birdsThemeLabel');
    const muteBtn = document.getElementById('muteBtn');
    const topControls = document.getElementById('topControls');
    const startActionContainer = document.getElementById('startActionContainer');

    // --- –°–™–°–¢–û–Ø–ù–ò–ï –ù–ê –ò–ì–†–ê–¢–ê ---
    const gameState = {
        currentThemeData: [],
        numberOfPics: 0,
        selectedGameItems: [],
        hiddenItem: null,
        awaitingChoice: false,
    };

    // --- –ê–£–î–ò–û ---
    const bravoAudio = new Audio('audio/bravo_uily.wav');
    const opitaiPakAudio = new Audio('audio/opitaj_pak.wav');
    let isMuted = false;

    // --- "–°–™–ë–£–ñ–î–ê–ù–ï" –ù–ê WEB SPEECH API ---
    if ('speechSynthesis' in window) {
        speechSynthesis.getVoices();
        speechSynthesis.onvoiceschanged = () => {
            speechSynthesis.getVoices();
        };
    }

    // --- –§–£–ù–ö–¶–ò–ò ---
    function speakText(text) {
        if ('speechSynthesis' in window) {
            const voices = speechSynthesis.getVoices();
            if (voices.length === 0) {
                opitaiPakAudio.currentTime = 0;
                opitaiPakAudio.play().catch(err => console.error("–†–µ–∑–µ—Ä–≤–µ–Ω –∑–≤—É–∫ (–Ω—è–º–∞ –≥–ª–∞—Å–æ–≤–µ):", err));
                return;
            }
            // –¢–™–†–°–ò–ú –ê–ù–ì–õ–ò–ô–°–ö–ò –ì–õ–ê–° –ó–ê –¢–ï–°–¢–ê
            const voiceToUse = voices.find(voice => voice.lang === 'en-US');
            
            if (voiceToUse) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.voice = voiceToUse;
                utterance.lang = 'en-US'; // –ò–ó–ü–û–õ–ó–í–ê–ú–ï –ê–ù–ì–õ–ò–ô–°–ö–ò –ó–ê –¢–ï–°–¢–ê
                window.speechSynthesis.speak(utterance);
                return;
            }
        }
        // –ê–∫–æ API –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –ò–õ–ò –Ω—è–º–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏ –≥–ª–∞—Å, –ø—É—Å–∫–∞–º–µ —Ä–µ–∑–µ—Ä–≤–Ω–∏—è –∑–≤—É–∫
        opitaiPakAudio.currentTime = 0;
        opitaiPakAudio.play().catch(err => console.error("–†–µ–∑–µ—Ä–≤–µ–Ω –∑–≤—É–∫:", err));
    }

    function checkUnlockStatus() {
        const gamesPlayed = parseInt(localStorage.getItem('gamesPlayedCount')) || 0;
        if (gamesPlayed >= GAMES_TO_UNLOCK) {
            birdsThemeRadio.disabled = false;
            birdsThemeLabel.classList.remove('theme-locked', 'disabled-theme');
            birdsThemeLabel.title = `–ò–∑–∏–≥—Ä–∞–Ω–∏ –∏–≥—Ä–∏: ${gamesPlayed}. –¢–µ–º–∞—Ç–∞ –µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!`;
            birdsThemeLabel.innerHTML = birdsThemeLabel.innerHTML.replace('üîí', '‚úîÔ∏è');
        } else {
            birdsThemeRadio.disabled = true;
            birdsThemeLabel.classList.add('theme-locked', 'disabled-theme');
            birdsThemeLabel.title = `–ò–∑–∏–≥—Ä–∞–Ω–∏ –∏–≥—Ä–∏: ${gamesPlayed}/${GAMES_TO_UNLOCK}. –ù—É–∂–Ω–∏ —Å–∞ –æ—â–µ ${GAMES_TO_UNLOCK - gamesPlayed}.`;
        }
    }

    function incrementGamesPlayed() {
        let gamesPlayed = parseInt(localStorage.getItem('gamesPlayedCount')) || 0;
        if (gamesPlayed < GAMES_TO_UNLOCK) {
            gamesPlayed++;
            localStorage.setItem('gamesPlayedCount', gamesPlayed);
            checkUnlockStatus();
            if (gamesPlayed === GAMES_TO_UNLOCK) {
                alert('–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –û—Ç–∫–ª—é—á–∏ –Ω–æ–≤–∞ —Ç–µ–º–∞: –ü—Ç–∏—Ü–∏!');
            }
        }
    }

    function shuffleArray(array) {
        let currentIndex = array.length, randomIndex;
        while (currentIndex !== 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }

    function updateCountOptionsAvailability() {
        const selectedThemeKey = document.querySelector('input[name="theme"]:checked')?.value;
        if (!selectedThemeKey || !ALL_THEMES[selectedThemeKey]) return;
        const maxPicsInTheme = ALL_THEMES[selectedThemeKey].length;
        countRadios.forEach(radio => {
            const label = radio.closest('label');
            if (parseInt(radio.value) > maxPicsInTheme) {
                radio.disabled = true;
                if(label) label.classList.add('disabled-theme');
            } else {
                radio.disabled = false;
                if(label) label.classList.remove('disabled-theme');
            }
        });
        const currentSelectedCount = document.querySelector('input[name="count"]:checked');
        if (currentSelectedCount && currentSelectedCount.disabled) {
            const lastEnabledRadio = [...countRadios].reverse().find(r => !r.disabled);
            if (lastEnabledRadio) lastEnabledRadio.checked = true;
        }
    }
    
    function updateStartButtonState() {
        const themeSelected = document.querySelector('input[name="theme"]:checked');
        const countSelected = document.querySelector('input[name="count"]:checked');
        startGameBtn.disabled = !(themeSelected && countSelected);
    }

    function showGameUI() {
        optionsContainer.classList.add('hidden');
        topControls.classList.remove('hidden');
        startActionContainer.classList.remove('hidden');
        containerEl.classList.remove('hidden');
        gameMessage.classList.remove('message-hidden');
    }

    function showMenuUI() {
        document.body.classList.remove('bg-game');
        document.body.classList.add('bg-menu');
        gameTitleEl.innerHTML = '–ü–æ–∑–Ω–∞–π<br>–ö–ê–†–¢–ò–ù–ö–ê–¢–ê!';
        optionsContainer.classList.remove('hidden');
        topControls.classList.add('hidden');
        startActionContainer.classList.add('hidden');
        containerEl.classList.add('hidden');
        messageDisplay.classList.add('message-hidden');
    }

    function startGame() {
        document.body.classList.remove('bg-menu');
        document.body.classList.add('bg-game');
        const selectedTheme = document.querySelector('input[name="theme"]:checked').value;
        const themeLabel = document.querySelector(`input[value="${selectedTheme}"]`).closest('label');
        const themeDisplayName = themeLabel.textContent.replace(/üîí|‚úîÔ∏è/g, '').trim();
        gameState.numberOfPics = parseInt(document.querySelector('input[name="count"]:checked').value);
        gameState.currentThemeData = ALL_THEMES[selectedTheme];
        gameTitleEl.innerHTML = `–ü–æ–∑–Ω–∞–π<br>${themeDisplayName.toUpperCase()}!`;
        
        showGameUI();

        renderGamePics();
        renderAllPics();
        resetGameState();
    }

    function renderAllPics() {
        allPicsEl.innerHTML = '';
        gameState.currentThemeData.forEach(item => {
            const img = document.createElement('img');
            img.src = item.image;
            img.dataset.id = item.id;
            img.alt = item.name;
            img.addEventListener('click', () => chooseHandler(item.id));
            allPicsEl.appendChild(img);
        });
    }

    function renderGamePics() {
        gamePicsEl.innerHTML = '';
        const shuffledItems = shuffleArray([...gameState.currentThemeData]);
        gameState.selectedGameItems = shuffledItems.slice(0, gameState.numberOfPics);
        gameState.selectedGameItems.forEach((item) => {
            const img = document.createElement('img');
            img.src = item.image;
            img.dataset.id = item.id;
            img.alt = item.name;
            gamePicsEl.appendChild(img);
        });
    }
    
    function hideRandomPicture() {
        if (gameState.awaitingChoice) return;
        restoreHiddenImage();
        const hiddenIndex = Math.floor(Math.random() * gameState.numberOfPics);
        const allGameImages = gamePicsEl.querySelectorAll('img');
        if (allGameImages.length === 0) return;
        const hiddenImageElement = allGameImages[hiddenIndex];
        gameState.hiddenItem = gameState.selectedGameItems[hiddenIndex];
        gameState.hiddenItem.element = hiddenImageElement;
        hiddenImageElement.src = 'images/hide.png';
        hiddenImageElement.alt = '–°–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞';
        gameState.awaitingChoice = true;
        startBtn.classList.add('hidden');
        showMessage('–ü–æ–∑–Ω–∞–π –∫–æ–µ –ª–∏–ø—Å–≤–∞!');
    }

    function chooseHandler(chosenId) {
        if (!gameState.awaitingChoice) return;
        const hiddenId = gameState.hiddenItem.id;
        if (chosenId === hiddenId) {
            gameState.awaitingChoice = false;
            restoreHiddenImage();
            
            const playBravoAndRestart = () => {
                if (!isMuted) {
                    bravoAudio.currentTime = 0;
                    bravoAudio.play().catch(err => console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ '–ë—Ä–∞–≤–æ':", err));
                }
                setTimeout(startGame, 2500);
            };

            showMessage('–ë—Ä–∞–≤–æ!', 'success');
            incrementGamesPlayed();

            const itemSoundPath = gameState.hiddenItem.sound;
            if (itemSoundPath && !isMuted) {
                const itemSound = new Audio(itemSoundPath);
                itemSound.onended = playBravoAndRestart;
                itemSound.play().catch(err => {
                    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ –∑–≤—É–∫ –Ω–∞ –æ–±–µ–∫—Ç:", err);
                    playBravoAndRestart();
                });
            } else {
                playBravoAndRestart();
            }
        } else {
            // –ò–ó–ü–û–õ–ó–í–ê–ú–ï –ê–ù–ì–õ–ò–ô–°–ö–ò –¢–ï–ö–°–¢ –ó–ê –¢–ï–°–¢–ê
            const tryAgainMessages = ['Try again!', 'Are you sure?', 'Almost!'];
            const randomIndex = Math.floor(Math.random() * tryAgainMessages.length);
            const randomMessage = tryAgainMessages[randomIndex];
            
            if (!isMuted) {
                speakText(randomMessage);
            }
            
            showMessage(randomMessage, 'error');
        }
    }

    function showMessage(text, type = 'info') {
        messageDisplay.textContent = text;
        messageDisplay.classList.remove('message-hidden', 'message-success', 'message-error');
        messageDisplay.classList.add(`message-${type}`);
        messageDisplay.classList.add('message-animate');
    }

    function restoreHiddenImage() {
        if (gameState.hiddenItem && gameState.hiddenItem.element) {
            const el = gameState.hiddenItem.element;
            el.src = gameState.hiddenItem.image;
            el.alt = gameState.hiddenItem.name;
        }
    }

    function resetGameState() {
        restoreHiddenImage();
        gameState.awaitingChoice = false;
        gameState.hiddenItem = null;
        showMessage('–ù–∞—Ç–∏—Å–Ω–∏ "–°–ö–†–ò–ô –ö–ê–†–¢–ò–ù–ê" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à.');
        startBtn.classList.remove('hidden');
    }
    
    async function initializeApp() {
        document.body.classList.add('bg-menu');
        topControls.classList.add('hidden');
        try {
            const response = await fetch('themes.json');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            ALL_THEMES = await response.json();
            themeRadios.forEach(r => r.addEventListener('change', () => {
                updateCountOptionsAvailability();
                setTimeout(updateStartButtonState, 50);
            }));
            countRadios.forEach(r => r.addEventListener('change', updateStartButtonState));
            startGameBtn.addEventListener('click', startGame);
            startBtn.addEventListener('click', hideRandomPicture);
            backToMenuBtn.addEventListener('click', showMenuUI);
            
            muteBtn.addEventListener('click', () => {
                isMuted = !isMuted;
                muteBtn.textContent = isMuted ? 'üîä' : 'üîá';
            });

            checkUnlockStatus();
            updateCountOptionsAvailability();
            updateStartButtonState();
        } catch (error) {
            console.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –∏–ª–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ themes.json:", error);
            optionsContainer.innerHTML = `<p style="color: var(--error-color);">–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–º–∏—Ç–µ. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç 'themes.json' –µ –Ω–∞–ª–∏—á–µ–Ω –∏ —Å–∏–Ω—Ç–∞–∫—Ç–∏—á–Ω–æ –∫–æ—Ä–µ–∫—Ç–µ–Ω.</p>`;
        }
    }

    initializeApp();
});document.addEventListener('DOMContentLoaded', () => {
    // --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
    const GAMES_TO_UNLOCK = 15;
    let ALL_THEMES = {};

    // --- DOM –ï–õ–ï–ú–ï–ù–¢–ò ---
    const themeRadios = document.querySelectorAll('input[name="theme"]');
    const countRadios = document.querySelectorAll('input[name="count"]');
    const startGameBtn = document.getElementById('startGameBtn');
    const optionsContainer = document.getElementById('optionsContainer');
    const gameTitleEl = document.getElementById('gameTitle');
    const messageDisplay = document.getElementById('gameMessage');
    const startBtn = document.getElementById('start');
    const backToMenuBtn = document.getElementById('backToMenu');
    const allPicsEl = document.getElementById('allPics');
    const gamePicsEl = document.getElementById('gamePics');
    const containerEl = document.getElementById('container');
    const birdsThemeRadio = document.getElementById('birdsThemeRadio');
    const birdsThemeLabel = document.getElementById('birdsThemeLabel');
    const muteBtn = document.getElementById('muteBtn');
    const topControls = document.getElementById('topControls');
    const startActionContainer = document.getElementById('startActionContainer');

    // --- –°–™–°–¢–û–Ø–ù–ò–ï –ù–ê –ò–ì–†–ê–¢–ê ---
    const gameState = {
        currentThemeData: [],
        numberOfPics: 0,
        selectedGameItems: [],
        hiddenItem: null,
        awaitingChoice: false,
    };

    // --- –ê–£–î–ò–û ---
    const bravoAudio = new Audio('audio/bravo_uily.wav');
    const opitaiPakAudio = new Audio('audio/opitaj_pak.wav');
    let isMuted = false;

    // --- "–°–™–ë–£–ñ–î–ê–ù–ï" –ù–ê WEB SPEECH API ---
    if ('speechSynthesis' in window) {
        speechSynthesis.getVoices();
        speechSynthesis.onvoiceschanged = () => {
            speechSynthesis.getVoices();
        };
    }

    // --- –§–£–ù–ö–¶–ò–ò ---
    function speakText(text) {
        if ('speechSynthesis' in window) {
            const voices = speechSynthesis.getVoices();
            if (voices.length === 0) {
                opitaiPakAudio.currentTime = 0;
                opitaiPakAudio.play().catch(err => console.error("–†–µ–∑–µ—Ä–≤–µ–Ω –∑–≤—É–∫ (–Ω—è–º–∞ –≥–ª–∞—Å–æ–≤–µ):", err));
                return;
            }
            // –¢–™–†–°–ò–ú –ê–ù–ì–õ–ò–ô–°–ö–ò –ì–õ–ê–° –ó–ê –¢–ï–°–¢–ê
            const voiceToUse = voices.find(voice => voice.lang === 'en-US');
            
            if (voiceToUse) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.voice = voiceToUse;
                utterance.lang = 'en-US'; // –ò–ó–ü–û–õ–ó–í–ê–ú–ï –ê–ù–ì–õ–ò–ô–°–ö–ò –ó–ê –¢–ï–°–¢–ê
                window.speechSynthesis.speak(utterance);
                return;
            }
        }
        // –ê–∫–æ API –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –ò–õ–ò –Ω—è–º–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏ –≥–ª–∞—Å, –ø—É—Å–∫–∞–º–µ —Ä–µ–∑–µ—Ä–≤–Ω–∏—è –∑–≤—É–∫
        opitaiPakAudio.currentTime = 0;
        opitaiPakAudio.play().catch(err => console.error("–†–µ–∑–µ—Ä–≤–µ–Ω –∑–≤—É–∫:", err));
    }

    function checkUnlockStatus() {
        const gamesPlayed = parseInt(localStorage.getItem('gamesPlayedCount')) || 0;
        if (gamesPlayed >= GAMES_TO_UNLOCK) {
            birdsThemeRadio.disabled = false;
            birdsThemeLabel.classList.remove('theme-locked', 'disabled-theme');
            birdsThemeLabel.title = `–ò–∑–∏–≥—Ä–∞–Ω–∏ –∏–≥—Ä–∏: ${gamesPlayed}. –¢–µ–º–∞—Ç–∞ –µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!`;
            birdsThemeLabel.innerHTML = birdsThemeLabel.innerHTML.replace('üîí', '‚úîÔ∏è');
        } else {
            birdsThemeRadio.disabled = true;
            birdsThemeLabel.classList.add('theme-locked', 'disabled-theme');
            birdsThemeLabel.title = `–ò–∑–∏–≥—Ä–∞–Ω–∏ –∏–≥—Ä–∏: ${gamesPlayed}/${GAMES_TO_UNLOCK}. –ù—É–∂–Ω–∏ —Å–∞ –æ—â–µ ${GAMES_TO_UNLOCK - gamesPlayed}.`;
        }
    }

    function incrementGamesPlayed() {
        let gamesPlayed = parseInt(localStorage.getItem('gamesPlayedCount')) || 0;
        if (gamesPlayed < GAMES_TO_UNLOCK) {
            gamesPlayed++;
            localStorage.setItem('gamesPlayedCount', gamesPlayed);
            checkUnlockStatus();
            if (gamesPlayed === GAMES_TO_UNLOCK) {
                alert('–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –û—Ç–∫–ª—é—á–∏ –Ω–æ–≤–∞ —Ç–µ–º–∞: –ü—Ç–∏—Ü–∏!');
            }
        }
    }

    function shuffleArray(array) {
        let currentIndex = array.length, randomIndex;
        while (currentIndex !== 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }

    function updateCountOptionsAvailability() {
        const selectedThemeKey = document.querySelector('input[name="theme"]:checked')?.value;
        if (!selectedThemeKey || !ALL_THEMES[selectedThemeKey]) return;
        const maxPicsInTheme = ALL_THEMES[selectedThemeKey].length;
        countRadios.forEach(radio => {
            const label = radio.closest('label');
            if (parseInt(radio.value) > maxPicsInTheme) {
                radio.disabled = true;
                if(label) label.classList.add('disabled-theme');
            } else {
                radio.disabled = false;
                if(label) label.classList.remove('disabled-theme');
            }
        });
        const currentSelectedCount = document.querySelector('input[name="count"]:checked');
        if (currentSelectedCount && currentSelectedCount.disabled) {
            const lastEnabledRadio = [...countRadios].reverse().find(r => !r.disabled);
            if (lastEnabledRadio) lastEnabledRadio.checked = true;
        }
    }
    
    function updateStartButtonState() {
        const themeSelected = document.querySelector('input[name="theme"]:checked');
        const countSelected = document.querySelector('input[name="count"]:checked');
        startGameBtn.disabled = !(themeSelected && countSelected);
    }

    function showGameUI() {
        optionsContainer.classList.add('hidden');
        topControls.classList.remove('hidden');
        startActionContainer.classList.remove('hidden');
        containerEl.classList.remove('hidden');
        gameMessage.classList.remove('message-hidden');
    }

    function showMenuUI() {
        document.body.classList.remove('bg-game');
        document.body.classList.add('bg-menu');
        gameTitleEl.innerHTML = '–ü–æ–∑–Ω–∞–π<br>–ö–ê–†–¢–ò–ù–ö–ê–¢–ê!';
        optionsContainer.classList.remove('hidden');
        topControls.classList.add('hidden');
        startActionContainer.classList.add('hidden');
        containerEl.classList.add('hidden');
        messageDisplay.classList.add('message-hidden');
    }

    function startGame() {
        document.body.classList.remove('bg-menu');
        document.body.classList.add('bg-game');
        const selectedTheme = document.querySelector('input[name="theme"]:checked').value;
        const themeLabel = document.querySelector(`input[value="${selectedTheme}"]`).closest('label');
        const themeDisplayName = themeLabel.textContent.replace(/üîí|‚úîÔ∏è/g, '').trim();
        gameState.numberOfPics = parseInt(document.querySelector('input[name="count"]:checked').value);
        gameState.currentThemeData = ALL_THEMES[selectedTheme];
        gameTitleEl.innerHTML = `–ü–æ–∑–Ω–∞–π<br>${themeDisplayName.toUpperCase()}!`;
        
        showGameUI();

        renderGamePics();
        renderAllPics();
        resetGameState();
    }

    function renderAllPics() {
        allPicsEl.innerHTML = '';
        gameState.currentThemeData.forEach(item => {
            const img = document.createElement('img');
            img.src = item.image;
            img.dataset.id = item.id;
            img.alt = item.name;
            img.addEventListener('click', () => chooseHandler(item.id));
            allPicsEl.appendChild(img);
        });
    }

    function renderGamePics() {
        gamePicsEl.innerHTML = '';
        const shuffledItems = shuffleArray([...gameState.currentThemeData]);
        gameState.selectedGameItems = shuffledItems.slice(0, gameState.numberOfPics);
        gameState.selectedGameItems.forEach((item) => {
            const img = document.createElement('img');
            img.src = item.image;
            img.dataset.id = item.id;
            img.alt = item.name;
            gamePicsEl.appendChild(img);
        });
    }
    
    function hideRandomPicture() {
        if (gameState.awaitingChoice) return;
        restoreHiddenImage();
        const hiddenIndex = Math.floor(Math.random() * gameState.numberOfPics);
        const allGameImages = gamePicsEl.querySelectorAll('img');
        if (allGameImages.length === 0) return;
        const hiddenImageElement = allGameImages[hiddenIndex];
        gameState.hiddenItem = gameState.selectedGameItems[hiddenIndex];
        gameState.hiddenItem.element = hiddenImageElement;
        hiddenImageElement.src = 'images/hide.png';
        hiddenImageElement.alt = '–°–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞';
        gameState.awaitingChoice = true;
        startBtn.classList.add('hidden');
        showMessage('–ü–æ–∑–Ω–∞–π –∫–æ–µ –ª–∏–ø—Å–≤–∞!');
    }

    function chooseHandler(chosenId) {
        if (!gameState.awaitingChoice) return;
        const hiddenId = gameState.hiddenItem.id;
        if (chosenId === hiddenId) {
            gameState.awaitingChoice = false;
            restoreHiddenImage();
            
            const playBravoAndRestart = () => {
                if (!isMuted) {
                    bravoAudio.currentTime = 0;
                    bravoAudio.play().catch(err => console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ '–ë—Ä–∞–≤–æ':", err));
                }
                setTimeout(startGame, 2500);
            };

            showMessage('–ë—Ä–∞–≤–æ!', 'success');
            incrementGamesPlayed();

            const itemSoundPath = gameState.hiddenItem.sound;
            if (itemSoundPath && !isMuted) {
                const itemSound = new Audio(itemSoundPath);
                itemSound.onended = playBravoAndRestart;
                itemSound.play().catch(err => {
                    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É—Å–∫–∞–Ω–µ –Ω–∞ –∑–≤—É–∫ –Ω–∞ –æ–±–µ–∫—Ç:", err);
                    playBravoAndRestart();
                });
            } else {
                playBravoAndRestart();
            }
        } else {
            // –ò–ó–ü–û–õ–ó–í–ê–ú–ï –ê–ù–ì–õ–ò–ô–°–ö–ò –¢–ï–ö–°–¢ –ó–ê –¢–ï–°–¢–ê
            const tryAgainMessages = ['Try again!', 'Are you sure?', 'Almost!'];
            const randomIndex = Math.floor(Math.random() * tryAgainMessages.length);
            const randomMessage = tryAgainMessages[randomIndex];
            
            if (!isMuted) {
                speakText(randomMessage);
            }
            
            showMessage(randomMessage, 'error');
        }
    }

    function showMessage(text, type = 'info') {
        messageDisplay.textContent = text;
        messageDisplay.classList.remove('message-hidden', 'message-success', 'message-error');
        messageDisplay.classList.add(`message-${type}`);
        messageDisplay.classList.add('message-animate');
    }

    function restoreHiddenImage() {
        if (gameState.hiddenItem && gameState.hiddenItem.element) {
            const el = gameState.hiddenItem.element;
            el.src = gameState.hiddenItem.image;
            el.alt = gameState.hiddenItem.name;
        }
    }

    function resetGameState() {
        restoreHiddenImage();
        gameState.awaitingChoice = false;
        gameState.hiddenItem = null;
        showMessage('–ù–∞—Ç–∏—Å–Ω–∏ "–°–ö–†–ò–ô –ö–ê–†–¢–ò–ù–ê" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à.');
        startBtn.classList.remove('hidden');
    }
    
    async function initializeApp() {
        document.body.classList.add('bg-menu');
        topControls.classList.add('hidden');
        try {
            const response = await fetch('themes.json');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            ALL_THEMES = await response.json();
            themeRadios.forEach(r => r.addEventListener('change', () => {
                updateCountOptionsAvailability();
                setTimeout(updateStartButtonState, 50);
            }));
            countRadios.forEach(r => r.addEventListener('change', updateStartButtonState));
            startGameBtn.addEventListener('click', startGame);
            startBtn.addEventListener('click', hideRandomPicture);
            backToMenuBtn.addEventListener('click', showMenuUI);
            
            muteBtn.addEventListener('click', () => {
                isMuted = !isMuted;
                muteBtn.textContent = isMuted ? 'üîä' : 'üîá';
            });

            checkUnlockStatus();
            updateCountOptionsAvailability();
            updateStartButtonState();
        } catch (error) {
            console.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –∏–ª–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ themes.json:", error);
            optionsContainer.innerHTML = `<p style="color: var(--error-color);">–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–º–∏—Ç–µ. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç 'themes.json' –µ –Ω–∞–ª–∏—á–µ–Ω –∏ —Å–∏–Ω—Ç–∞–∫—Ç–∏—á–Ω–æ –∫–æ—Ä–µ–∫—Ç–µ–Ω.</p>`;
        }
    }

    initializeApp();
});
